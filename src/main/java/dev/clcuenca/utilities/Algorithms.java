package dev.clcuenca.utilities;

import java.util.Arrays;

/**
 * <p>Collection of algorithms.</p>
 * @author Carlos L. Cuenca
 * @since 1.0.0
 */
public class Algorithms {

    /**
     * <p>Generates all t-combinations (second parameter) with the numbers in the specified range of 0 to n - 1.</p>
     * <p>See: The Art of Computer Programming, Vol. 4B Part 2; Algorithm L. [Knuth].</p>
     * @param n The maximum value of the domain to generate combinations.
     * @param combinations The size of the combination sequence to generate.
     * @param combinationCallback Callback that gets invoked on each combination.
     * @since 1.0.0
     * @see CombinationCallback
     */
    public static void LexicographicCombinations(final int n,
                                                 final int combinations,
                                                 final CombinationCallback combinationCallback) {

        // Assert the combinations are less than or equal to the specified domain
        if((combinations <= n) && (combinationCallback != null)) {

            // Instantiate the set that will contain each combination
            final int[] set = new int[n + 2];

            // Initialize the set
            for(int index = 0; index < n; index++)
                set[index] = index;

            // Update the sentinels
            set[combinations] = n;
            set[combinations + 1] = 0;

            while(true) {

                // Callback a copy of the current combination of length t
                combinationCallback.invoke(Arrays.copyOf(set, combinations));

                // Update the combination
                int choose = 0; while ((set[choose] + 1) == set[choose + 1]) set[choose++] = choose;

                // Update the sentinel
                set[choose]++;

                // Break condition
                if(choose >= combinations) break;

            }

        }

    }

    /**
     * <p>Functional interface that receives a combination generated by
     * {@link Algorithms#LexicographicCombinations(int, int, CombinationCallback)}.</p>
     * @since 1.0.0
     * @author Carlos L. Cuenca
     */
    @FunctionalInterface
    public interface CombinationCallback {

        void invoke(final int[] combination);

    }

}
